// Code generated by mockery v2.29.0. DO NOT EDIT.

package user

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserRepoMock is an autogenerated mock type for the UserRepo type
type UserRepoMock struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, in
func (_m *UserRepoMock) Find(ctx context.Context, in InputUserIdentifier) (User, error) {
	ret := _m.Called(ctx, in)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, InputUserIdentifier) (User, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, InputUserIdentifier) User); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, InputUserIdentifier) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, in
func (_m *UserRepoMock) Insert(ctx context.Context, in InputCreateUser) (User, error) {
	ret := _m.Called(ctx, in)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, InputCreateUser) (User, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, InputCreateUser) User); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, InputCreateUser) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, in
func (_m *UserRepoMock) Update(ctx context.Context, in User) (User, error) {
	ret := _m.Called(ctx, in)

	var r0 User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, User) (User, error)); ok {
		return rf(ctx, in)
	}
	if rf, ok := ret.Get(0).(func(context.Context, User) User); ok {
		r0 = rf(ctx, in)
	} else {
		r0 = ret.Get(0).(User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, User) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserRepoMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepoMock creates a new instance of UserRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepoMock(t mockConstructorTestingTNewUserRepoMock) *UserRepoMock {
	mock := &UserRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
