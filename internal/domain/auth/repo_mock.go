// Code generated by mockery v2.29.0. DO NOT EDIT.

package auth

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// AuthRepoMock is an autogenerated mock type for the AuthRepo type
type AuthRepoMock struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, key
func (_m *AuthRepoMock) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, key
func (_m *AuthRepoMock) Find(ctx context.Context, key string) (Claims, error) {
	ret := _m.Called(ctx, key)

	var r0 Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (Claims, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) Claims); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(Claims)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, key, claims, duration
func (_m *AuthRepoMock) Insert(ctx context.Context, key string, claims Claims, duration time.Duration) error {
	ret := _m.Called(ctx, key, claims, duration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, Claims, time.Duration) error); ok {
		r0 = rf(ctx, key, claims, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAuthRepoMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthRepoMock creates a new instance of AuthRepoMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthRepoMock(t mockConstructorTestingTNewAuthRepoMock) *AuthRepoMock {
	mock := &AuthRepoMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
