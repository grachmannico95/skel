// Code generated by mockery v2.29.0. DO NOT EDIT.

package auth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TokenMakerMock is an autogenerated mock type for the TokenMaker type
type TokenMakerMock struct {
	mock.Mock
}

// Generate provides a mock function with given fields: ctx, claims, secret
func (_m *TokenMakerMock) Generate(ctx context.Context, claims Claims, secret string) (string, error) {
	ret := _m.Called(ctx, claims, secret)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, Claims, string) (string, error)); ok {
		return rf(ctx, claims, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, Claims, string) string); ok {
		r0 = rf(ctx, claims, secret)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, Claims, string) error); ok {
		r1 = rf(ctx, claims, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Validate provides a mock function with given fields: ctx, token, secret
func (_m *TokenMakerMock) Validate(ctx context.Context, token string, secret string) (*Claims, error) {
	ret := _m.Called(ctx, token, secret)

	var r0 *Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*Claims, error)); ok {
		return rf(ctx, token, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *Claims); ok {
		r0 = rf(ctx, token, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, token, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTokenMakerMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewTokenMakerMock creates a new instance of TokenMakerMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTokenMakerMock(t mockConstructorTestingTNewTokenMakerMock) *TokenMakerMock {
	mock := &TokenMakerMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
